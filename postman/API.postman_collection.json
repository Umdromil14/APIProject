{
	"info": {
		"_postman_id": "1b702c3e-ce18-4ff5-b7d3-5b59a3ea54c4",
		"name": "API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29922587"
	},
	"item": [
		{
			"name": "platform",
			"item": [
				{
					"name": "get",
					"item": [
						{
							"name": "getAllPlatform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//found all platform\r",
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}:{{port}}/platform/",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "getOnePlatform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"code PC should be correctly returned\",() => {\r",
											"    const codePC = [{\r",
											"        code : \"PC\",\r",
											"        description : \"PC\",\r",
											"        abbreviation : \"PC\"\r",
											"    }];\r",
											"    //in a array bc can have all platform from the same function\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.be.eql(codePC);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform/?code=PC",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform",
										""
									],
									"query": [
										{
											"key": "code",
											"value": "PC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wrongPlatformCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 404\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoxNCwidXNlcm5hbWUiOiJiYmJiIiwiZW1haWwiOiJwaWF0bWFuMjAxQGdtYWlsLmNvbSIsImhhc2hlZFBhc3N3b3JkIjoiJDJiJDEwJGZIVmtQVXhqR0lEczJ2cUlseFBmN09RLld0U1NnNWRMQ2pBOUtEaHkubW9USGl4bWRYU1NDIn0sImlhdCI6MTY5OTU2MjI3NCwiZXhwIjoxNjk5NjQ4Njc0fQ.H28umfH3-76vizvchvaP2oQkIfH60LOYQGL5wp1fUiA",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}:{{port}}/platform/{{wrongCodePlatform}}",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform",
										"{{wrongCodePlatform}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "post",
					"item": [
						{
							"name": "postPlatform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//create a realPlatform with the right token\r",
											"pm.test(\"status code is 2001\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\" : \"GameBoy\",\r\n    \"description\" : \"GameBoy\",\r\n    \"abbreviation\" : \"GameBoy\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform/",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "getNewPlatform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"code PC should be correctly returned\",() => {\r",
											"    const codeGB = [{\r",
											"        code : \"GAMEBOY\",\r",
											"        description : \"GameBoy\",\r",
											"        abbreviation : \"GameBoy\"\r",
											"    }];\r",
											"    //in a array bc can have all platform from the same function\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.be.eql(codeGB);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform/{{newCodePlatform}}",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform",
										"{{newCodePlatform}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PostWithUnvalidToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{unvalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\" : \"PSP2\",\r\n    \"description\" : \"Playstation portable 2\",\r\n    \"abbreviation\" : \"PSP2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform"
									]
								}
							},
							"response": []
						},
						{
							"name": "postWithNonAdminToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 403\", function(){\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{nonAdminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\" : \"PSP2\",\r\n    \"description\" : \"Playstation portable 2\",\r\n    \"abbreviation\" : \"PSP2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform"
									]
								}
							},
							"response": []
						},
						{
							"name": "postWithoutToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 401\", function(){\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\" : \"PSP2\",\r\n    \"description\" : \"Playstation portable 2\",\r\n    \"abbreviation\" : \"PSP2\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform"
									]
								}
							},
							"response": []
						},
						{
							"name": "postWithCodeAlreadyInDB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 409\", function(){\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\" : \"PC\",\r\n    \"description\" : \"PC\",\r\n    \"abbreviation\" : \"PC\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform"
									]
								}
							},
							"response": []
						},
						{
							"name": "postWithoutdescription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\" : \"Console\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform"
									]
								}
							},
							"response": []
						},
						{
							"name": "postWithoutCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\" : \"une description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform"
									]
								}
							},
							"response": []
						},
						{
							"name": "postWithNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\" : 1,\r\n    \"description\" : \"Une description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform/",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PostWithVideoGames",
					"item": [
						{
							"name": "postPlatformWithVideoGames",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\" : \"PS6\",\r\n    \"description\": \"Playstation 6\",\r\n    \"abbreviation\" : \"PS6\",\r\n    \"video_games\" :[\r\n        {\r\n            \"name\":\"Sekiro : shadow die twice\" ,\r\n            \"description\": \"jeu bien compliqué avec des katanas\",\r\n            \"release_date\": \"2023-11-28\",\r\n            \"release_price\": 69.99,\r\n            \"store_page_url\" : \"https://www.playstation.com/fr-be/games/sekiro-shadows-die-twice/\"\r\n        },\r\n        {\r\n            \"name\": \"Chivalry 2\" ,\r\n            \"description\": \"jeu avec des chevaliers mais en mieux que le 1\",\r\n            \"release_date\":\"2023-11-28\",\r\n            \"release_price\": 39.99,\r\n            \"store_page_url\" :\"https://www.playstation.com/fr-be/games/chivalry-2/\"\r\n        },\r\n        {\r\n            \"name\":\"Death stranding\" ,\r\n            \"description\": \"jeu version facteur\",\r\n            \"release_date\": \"2023-11-28\",\r\n            \"release_price\": 69.99,\r\n            \"store_page_url\" :\"https://www.playstation.com/fr-be/games/death-stranding-directors-cut/\"\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform/WithVideoGames",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform",
										"WithVideoGames"
									]
								}
							},
							"response": []
						},
						{
							"name": "getGamesCreated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"code jeu should be correctly returned\",() => {\r",
											"    const jeu = [{\r",
											"        id : 104,\r",
											"        name : \"Death stranding\",\r",
											"        description : \"jeu version facteur\"\r",
											"    }];\r",
											"    //in a array bc can have all platform from the same function\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.be.eql(jeu);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}:{{port}}/videoGame/?id=104",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"videoGame",
										""
									],
									"query": [
										{
											"key": "id",
											"value": "104"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "patch",
					"item": [
						{
							"name": "patchPlatform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 204\", function(){\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\" : \"Portable\",\r\n    \"description\" : \"Portable\",\r\n    \"abbreviation\" : \"tel\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform/MOB",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform",
										"MOB"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "patchWithoutCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//patch a realPlatform with the right token\r",
											"\r",
											"//patch a platform with a code that already exist \r",
											"\r",
											"\r",
											"//patch with a string instead of a number\r",
											"\r",
											"//patch a non found platform\r",
											"\r",
											"\r",
											"//patch without description\r",
											"\r",
											"//patch without name\r",
											"\r",
											"//patch with a Number "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\" : \"description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform/PS1",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform",
										"PS1"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getThePatch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//patch a realPlatform with the right token\r",
											"\r",
											"//patch a platform with a code that already exist \r",
											"\r",
											"\r",
											"//patch with a string instead of a number\r",
											"\r",
											"//patch a non found platform\r",
											"\r",
											"\r",
											"//patch without description\r",
											"\r",
											"//patch without name\r",
											"\r",
											"//patch with a Number "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\" : \"description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform/?code=PS1",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform",
										""
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										},
										{
											"key": "code",
											"value": "PS1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "patchPlatformWithCodeAlreadyExist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 409\", function(){\r",
											"    pm.response.to.have.status(409);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\" : \"PS4\",\r\n    \"description\" :\"description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform/PS3",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform",
										"PS3"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "patchPlatformWithNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\" : 1,\r\n    \"description\" : \"update\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform/PS2",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform",
										"PS2"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "patchNonFoundPlatform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 404\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\" : \"code\",\r\n    \"description\" : \"description\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}:{{port}}/platform/PCM",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform",
										"PCM"
									],
									"query": [
										{
											"key": "",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete",
					"item": [
						{
							"name": "deletePlatform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 204\", function(){\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}:{{port}}/platform/XSX",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform",
										"XSX"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteNonFoundPlatform",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 404\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}:{{port}}/platform/PS17",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"platform",
										"PS17"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "publication",
			"item": [
				{
					"name": "get",
					"item": [
						{
							"name": "getPublication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}:{{port}}/publication",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"publication"
									]
								}
							},
							"response": []
						},
						{
							"name": "getOnePublicationbyId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"publication 1 should be correctly returned\",() => {\r",
											"    const publication = [{\r",
											"        id: 1,\r",
											"        platform_code: \"PC\",\r",
											"        video_game_id: 1,\r",
											"        release_date: \"2020-11-12T23:00:00.000Z\",\r",
											"        release_price: \"69.99\",\r",
											"        store_page_url: \"https://www.activision.com/games/call-of-duty/call-of-duty-black-ops-cold-war\"\r",
											"    }];\r",
											"    //in a array bc can have all platform from the same function\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.be.eql(publication);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}:{{port}}/publication/?publicationId=1",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"publication",
										""
									],
									"query": [
										{
											"key": "publicationId",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOnePublicationByWrongId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 404\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}:{{port}}/publication/?publicationId=1745",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"publication",
										""
									],
									"query": [
										{
											"key": "publicationId",
											"value": "1745"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOnePublicationByVideoGameid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}:{{port}}/publication/?videoGameId=4",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"publication",
										""
									],
									"query": [
										{
											"key": "videoGameId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOnePublicationbyVideoGameName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"publication 1 should be correctly returned\",() => {\r",
											"    const publication = [{\r",
											"        id: 12,\r",
											"        platform_code: \"NSW\",\r",
											"        video_game_id: 3,\r",
											"        release_date: \"2017-03-02T23:00:00.000Z\",\r",
											"        release_price: \"59.99\",\r",
											"        store_page_url: \"https://www.nintendo.com/games/detail/the-legend-of-zelda-breath-of-the-wild-switch/\"\r",
											"    },{\r",
											"        id: 13,\r",
											"        platform_code: \"WIIU\",\r",
											"        video_game_id: 3,\r",
											"        release_date: \"2017-03-02T23:00:00.000Z\",\r",
											"        release_price: \"59.99\",\r",
											"        store_page_url: null\r",
											"    }];\r",
											"    //in a array bc can have all platform from the same function\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.be.eql(publication);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}:{{port}}/publication/?videoGameName=zel",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"publication",
										""
									],
									"query": [
										{
											"key": "videoGameName",
											"value": "zel"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOnePublicationbyplatformCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"publication 1 should be correctly returned\",() => {\r",
											"    const publication = [{\r",
											"        id: 13,\r",
											"        platform_code: \"WIIU\",\r",
											"        video_game_id: 3,\r",
											"        release_date: \"2017-03-02T23:00:00.000Z\",\r",
											"        release_price: \"59.99\",\r",
											"        store_page_url: null\r",
											"    },\r",
											"    {\r",
											"        id: 46,\r",
											"        platform_code: \"WIIU\",\r",
											"        video_game_id: 9,\r",
											"        release_date: \"2015-12-16T23:00:00.000Z\",\r",
											"        release_price: \"29.99\",\r",
											"        store_page_url: null\r",
											"    }];\r",
											"    //in a array bc can have all platform from the same function\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.be.eql(publication);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}:{{port}}/publication/?platformCode=WIIU",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"publication",
										""
									],
									"query": [
										{
											"key": "platformCode",
											"value": "WIIU"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOnePublicationbygetowngames",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}:{{port}}/publication/?getOwnGames=true",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"publication",
										""
									],
									"query": [
										{
											"key": "getOwnGames",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "post",
					"item": [
						{
							"name": "postPubication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//create a realpublication with the right token\r",
											"pm.test(\"status code is 201\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform_code\" : \"WIIU\",\r\n    \"video_game_id\" : 100,\r\n    \"release_date\" : \"2023-11-29\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3001/publication/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3001",
									"path": [
										"publication",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "postPubicationWrongDateFormat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform_code\" : \"WIIU\",\r\n    \"video_game_id\" : 2,\r\n    \"release_date\" : \"29-11-2023\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3001/publication",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3001",
									"path": [
										"publication"
									]
								}
							},
							"response": []
						},
						{
							"name": "postPubicationWithoutALabel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"video_game_id\" : 100,\r\n    \"release_date\" : \"2023-11-29\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3001/publication",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3001",
									"path": [
										"publication"
									]
								}
							},
							"response": []
						},
						{
							"name": "postPubicationWithoutBody",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 400\", function(){\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3001/publication",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3001",
									"path": [
										"publication"
									]
								}
							},
							"response": []
						},
						{
							"name": "postPubicationWithCodeAlreadyPresent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 409\", function(){\r",
											"    pm.response.to.have.status(409);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform_code\" : \"PC\",\r\n    \"video_game_id\" : 100,\r\n    \"release_date\" : \"2023-11-29\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3001/publication",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3001",
									"path": [
										"publication"
									]
								}
							},
							"response": []
						},
						{
							"name": "postPubicationWithCodeNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//create with platform code or videoGame id doesn't exist\r",
											"pm.test(\"status code is 404\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform_code\" : \"WIIU2\",\r\n    \"video_game_id\" : 100,\r\n    \"release_date\" : \"2023-11-29\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3001/publication",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3001",
									"path": [
										"publication"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "patch",
					"item": [
						{
							"name": "patchPublication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//patch a realpublication with the right token\r",
											"pm.test(\"status code is 204\", function(){\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform_code\" : \"PSP\",\r\n    \"release_price\" : 19.99\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3001/publication/101",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3001",
									"path": [
										"publication",
										"101"
									]
								}
							},
							"response": []
						},
						{
							"name": "patchPublicationWithCodeAlreadyPresent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//patch a publication with a code that already exist \r",
											"pm.test(\"status code is 409\", function(){\r",
											"    pm.response.to.have.status(409);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform_code\" : \"PS5\",\r\n    \"release_price\" : 19.99\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3001/publication/113",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3001",
									"path": [
										"publication",
										"113"
									]
								}
							},
							"response": []
						},
						{
							"name": "patchPublicationNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 404\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"platform_code\" : \"PSP\",\r\n    \"release_price\" : 19.99\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3001/publication/5891",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3001",
									"path": [
										"publication",
										"5891"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "delete",
					"item": [
						{
							"name": "deletePublication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 204\", function(){\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3001/publication/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3001",
									"path": [
										"publication",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteNotFound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 404\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"//use a token invalid\r",
											"\r",
											"//use a non admin token\r",
											"\r",
											"//don't use token\r",
											"\r",
											"//delete a publication with a code that already exist \r",
											"\r",
											"\r",
											"//delete with string instead of a number and opposite\r",
											"\r",
											"//delete a non found publication\r",
											"\r",
											"\r",
											"//delete without some label\r",
											"\r",
											"\r",
											"//delete without body"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3001/publication/1204",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3001",
									"path": [
										"publication",
										"1204"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "wrongCodePlatform",
			"value": "?code=PC2",
			"type": "string"
		},
		{
			"key": "codePlatform",
			"value": "?code=PC",
			"type": "string"
		},
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjozLCJpc0FkbWluIjp0cnVlfSwiaWF0IjoxNzAxMjQ5ODI1LCJleHAiOjE3MDEzMzYyMjV9.oviPyCEm_NUSIX_uSLxPBYnZzkprBaRR-sqx49OSRAQ",
			"type": "string"
		},
		{
			"key": "url",
			"value": "http://localhost",
			"type": "string"
		},
		{
			"key": "port",
			"value": "3001",
			"type": "string"
		},
		{
			"key": "newCodePlatform",
			"value": "?code=GAMEBOY",
			"type": "string"
		},
		{
			"key": "unvalidToken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjoxNCwiaXNBZG1pbiI6ZmFsc2V9LCJpYXQiOjE3MDA0OTE1MDUsImV4cCI6MTcwMDU3NzkwNX0.FGoS-hHG1U6kUH9mGfZvgponjfmbUAbvc74yIRn9VYE",
			"type": "string"
		},
		{
			"key": "nonAdminToken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7ImlkIjo1LCJpc0FkbWluIjpmYWxzZX0sImlhdCI6MTcwMTE3ODkyNiwiZXhwIjoxNzAxMjY1MzI2fQ.vBIeTf1TvG9eeChD-USytQgfqDcpk7_HwpNRXLyOEIg",
			"type": "string"
		}
	]
}